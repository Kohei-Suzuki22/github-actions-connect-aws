name: "infra preview & deploy"

on:
  push:
    branches:
      [main, master]
    paths:
      - 10_infra/**
      - .github/workflows/**
  workflow_dispatch:

# ワークフロー内で、権限が必要とされる場合(他アプリのAPIを使用するために、トークンを渡す・github内の機能をワークフロー内から指定するための権限)に指定することでデフォルトの権限を上書きすることができる。
# ワークフロー直下で、「permisssions:」を指定することで、すべてのjobに対して権限の変更ができる。
# ※ job内で指定することによって、そのjobのみで権限の上書きができる。
permissions:
  # id-token: write オープンIDコネクトを提供しているクラウドプロバイダ(例えばAWS)にjwtトークンを要求できるようになる。
  # ※ 別途でクラウドプロバイダ(例えばAWS)側で、githubに対するopenID Connectを有効化する必要がある。
  # https://docs.github.com/ja/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#adding-permissions-settings
  id-token: write
  # contents: リポジトリ内のリソース(ソースコード)に対する権限
  # リポジトリ内のリソースをクラウドプロバイダにreadできる権限を渡す。
  contents: read

env:
  AWS_REGION: ap-northeast-1
  TF_VERSION: 1.2.8
  TF_PROJECT: tastylog
  TF_ENVIRONMENT: dev



defaults:
  run:
    shell: bash
    # 各ステップを実行するディレクトリを指定。(わざわざmvしなくてもいい。)
    working-directory: "10_infra/"


jobs:
  preview:
    name: "Preview"
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v3
      - name: setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: terraform format
        # terraform fmtコマンド: tfファイルをフォーマットする。(実際にフォーマットしてくれる。)
        # -checkオプションをつけることでフォーマットする必要があることを示してくれる。(実際にフォーマットしてくれない。)
        run: terraform fmt -check
      - name: configure aws credential
        # github上でWS Credentialsを実装するためのアクション
        # https://github.com/aws-actions/configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
      - name: terraform init
        run: terraform init -no-color
      - name: terraform validate
        # terraform validate: tfファイルの構文が間違っていないかチェックできる。
        run: terraform validate -no-color
      - name: teraform plan
        # terraform plan 現在構成されているインフラ(つまりtfstateファイル)と 変更があるかどうかを確認できる。
        # 引数として、terraform上で実行するための変数を渡している。
        # -input=falseに設定しないと、inputを待ち続けることになるため、falseで設定する。(ワークフローが次に進まなくなるため)
        # -detailed-exitcode: コマンド終了時に情報を返す。 0:差分なし。 1:エラー。 2:差分あり
        run: | 
          terraform plan \
          -var project=${{ env.TF_PROJECT }} \
          -var environment=${{ env.TF_ENVIRONMENT }} \
          -var username=${{ env.MYSQL_USERNAME }} \
          -var password=${{ env.MYSQL_PASSWORD }} \
          -input=false \
          -no-color \
          -detailed-exitcode






    
